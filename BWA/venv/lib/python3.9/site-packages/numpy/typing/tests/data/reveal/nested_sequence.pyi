<<<<<<< HEAD
import sys
from collections.abc import Sequence
from typing import Any

from numpy._typing import _NestedSequence

if sys.version_info >= (3, 11):
    from typing import assert_type
else:
    from typing_extensions import assert_type
=======
from typing import Sequence, Tuple, List, Any
import numpy.typing as npt
>>>>>>> c03913b4420b10b4657dfb6a856eb245e1ebfb58

a: Sequence[int]
b: Sequence[Sequence[int]]
c: Sequence[Sequence[Sequence[int]]]
d: Sequence[Sequence[Sequence[Sequence[int]]]]
e: Sequence[bool]
<<<<<<< HEAD
f: tuple[int, ...]
g: list[int]
h: Sequence[Any]

def func(a: _NestedSequence[int]) -> None:
    ...

assert_type(func(a), None)
assert_type(func(b), None)
assert_type(func(c), None)
assert_type(func(d), None)
assert_type(func(e), None)
assert_type(func(f), None)
assert_type(func(g), None)
assert_type(func(h), None)
assert_type(func(range(15)), None)
=======
f: Tuple[int, ...]
g: List[int]
h: Sequence[Any]

def func(a: npt._NestedSequence[int]) -> None:
    ...

reveal_type(func(a))  # E: None
reveal_type(func(b))  # E: None
reveal_type(func(c))  # E: None
reveal_type(func(d))  # E: None
reveal_type(func(e))  # E: None
reveal_type(func(f))  # E: None
reveal_type(func(g))  # E: None
reveal_type(func(h))  # E: None
reveal_type(func(range(15)))  # E: None
>>>>>>> c03913b4420b10b4657dfb6a856eb245e1ebfb58
